{"name":"TokyoTime","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Not just another arduino based alarm-clock. But much more than that. It has a Two-Wire interface, serial interface, RTC, temperature sensor and a buzzer.\r\n\r\nThese features make it ideal for all projects where temperature and time are critical like:\r\n\r\n  * Waking up in the morning,\r\n  * Cooking,\r\n  * Brewing,\r\n  * Making yogurt,\r\n  * etc.\r\n\r\nIn addition it can be powered from a CR2032 battery, or from a 5V wall-wart.\r\n\r\nThis project builds on the [BigTime](https://github.com/nseidle/BigTime) project by @nseidle, but the whole board was redesigned from scratch.\r\n\r\n<img src=\"https://dl.dropbox.com/u/78009186/Photos/2013-01-19%2015.16.09.jpg\">\r\n\r\n## Assembly\r\n\r\nCheckout the assembly guide [here](https://dl.dropbox.com/u/78009186/Documents/TokyoTime_2.1_assembly.pdf).\r\n\r\n## Bootloader\r\n\r\nThe bootloader needed is the \"Atmega328 on a breadboard\" bootloader available\r\n(with instructions) from the Arduino\r\n[website](http://arduino.cc/en/Tutorial/ArduinoToBreadboard).\r\n\r\nThe TokyoTime doesn't have an ISP header to upload the firmware, so another\r\nboard must be used to burn the bootloader to the chip. A standard Arduino board\r\ncan be used.\r\n\r\nThe fuse should be set to use the internal 8MHz oscillator and the brown-out threshold should be no more than 1.8V. The fuse can be burnt with avrdude\r\nusing the following command\r\n\r\n    -U lfuse:w:0xe2:m -U hfuse:w:0xda:m -U efuse:w:0x06:m\r\n\r\n## Firmware\r\n\r\nThe TokyoTime board features a handy serial header that can be used to upload\r\nnew code to the chip (provided it has a bootloader) with a 3.3V FTDI-to-USB converter\r\nsuch as this [one](https://www.sparkfun.com/products/9873).\r\n\r\nThere are so far two different firmware for the board.\r\n\r\n* [Alarm clock](https://raw.github.com/fakufaku/TokyoTime/master/TokyoTime.ino)\r\n  : A standard clock with settable alarm and temperature reading.\r\n* [Oven controller](https://github.com/fakufaku/Kuishimbo) : A controller using\r\n  a PID loop to control the temperature of a toaster oven. There is a blog\r\n  [post](http://robinscheibler.org/hacks/2012/08/21/fixing-an-electric-oven/)\r\n  describing the whole project.\r\n\r\n## Bill Of Material\r\n\r\nAll the parts can be bought at [Akizuki Denshi](http://www.akizukidenshi.com/)\r\nin Akihabara, Tokyo. Equivalent parts can be found on\r\n[Mouser](http://www.mouser.com), but please check the datasheets to make sure\r\nthe footprints correspond.\r\n\r\n* 1x Green 7 segment (common cathode) [OSL40562-LG](http://akizukidenshi.com/catalog/g/gI-03945/)\r\n* 1x 3.3V Regulator [TA48M033F](http://akizukidenshi.com/catalog/g/gI-00538/)\r\n* 1x [Atmega328p](http://akizukidenshi.com/catalog/g/gI-03142/)\r\n* 1x [28-pin socket]() (optional, allows to change chip easily)\r\n* 1x [Buzzer](http://akizukidenshi.com/catalog/g/gP-04118/) (13mm)\r\n* 1x [Tactil switch](http://akizukidenshi.com/catalog/g/gP-03651/)\r\n* 1x Temperature sensor [LM61CIZ](http://akizukidenshi.com/catalog/g/gI-02726/)\r\n* 1x [32.768 Crystal](http://akizukidenshi.com/catalog/g/gP-04005/)\r\n* 1x [2.1mm barrel jack](http://akizukidenshi.com/catalog/g/gC-00077/)\r\n* 1x [2032 coin cell holder](http://akizukidenshi.com/catalog/g/gP-00706/)\r\n* 4x [0.1uF cap](http://akizukidenshi.com/catalog/g/gP-00090/) (C1, C2, C3, C5) (one 0.1uF cap is included with regulator from Akizuki)\r\n* 1x 47uF cap (C4) (Also included with regulator from Akizuki, value may vary)\r\n* 2x 10K resistors (R1, R3)\r\n* 1K resistor (R2)\r\n* 1x6 pin header\r\n* 1x3 pin header\r\n* 3x2 pin header\r\n\r\n## License\r\n\r\n(c) 2011, Robin Scheibler\r\n\r\nThis work is realeased under the [CC-BY-SA 3.0](http://creativecommons.org/licenses/by-sa/3.0/us/) License.","tagline":"Not just an Arduino powered alarm clock.","google":"UA-34052876-1"}